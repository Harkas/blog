---
layout: post
title:  "C++中Format函数的用法总结"
date:   2010-04-14
categories: C/C++
description: C/C++应用之--Format函数用法
---

有时候会忘记，还是记上来吧~~

##函数声明

```c++
function Format(const Format: string; const Args: array of const): string; overload;
```

##函数功能

事实上Format方法有两个种形式，另外一种是三个参数的，主要区别在于它是线程安全的，但并不多用，所以这里只对第一个介绍。Format参数是一个格式字符串，用于格式化Args里面的值的，Args是一个变体数组，即它里面可以有多个参数，而且每个参数可以不同。 例如：
  
**Format("my name is %6s","wind");**
  
返回的是：my name is wind

##函数参数

Format里面可以写普通的字符串，比如"my name is" ，但有些格式指令字符具有特殊意义，比如"%6s"

**格式指令具有以下的形式： "%" [index ":"] ["-"] [width] ["." prec] type**

它是以"%"开始,而以type结束，type表示一个具体的类型。中间是用来格式化type类型的指令字符，是可选的。各个参数的含义与用途如下：

###type的含义：

**[type]**

type参数可选的类型有d，u，f，e，g，n，m，p，s，x.

**1）** d 十进制数，表示一个整型值，u和d一样是整型值，但它是无符号的，而如果它对应的值是负的，则返回时是一个2的32次方减去这个负数的绝对值 。

例如：**Format("this is %u",-2);**

返回的是：this is 4294967294

**注：** 

%d是32位整型，如果想表示64位整型数（或LONGLONG型式的数据），则用%I64d表示，%I64d是VC下专门用来输入64位整形变量的值的参数。

**2）** f 对应浮点数

**3）** e 科学表示法，对应整型数和浮点数

例如：**Format("this is %e",-2.22);**

返回的是：this is -2.220000E+000

**4）** g 这个只能对应浮点型，且它会将值中多余的数去掉

例如：**Format("this is %g",02.200);**

返回的是：this is 2.2

**5）** n 只能对应浮点型，将值转化为号码的形式，看一个例子就明白了

例如：**Format("this is %n",4552.2176);**

返回的是：this is 4,552.22

**注：** 

a，只表示到小数后两位; 

b，即使小数没有被截断，它也不会也像整数部分一样有逗号来分开的

**6）** m 钱币类型，但关于货币类型有更好的格式化方法，这里只是简单的格式化，另外它只对应于浮点值

例如：**Format("this is %m",9552.21);**

返回的是：this is ￥9,552.21

**7）** p 对应于指针类型，返回的值是指针的地址，以十六进制的形式来表示

例如：**Format("this is %p",p);**

返回的是：this is 0012F548

**8）** s 对应字符串类型

**9）** x 必须是一个整形值，以十六进制的形式返回

例如：**Format("this is %X",15);**

返回的是：this is F

###下面介绍格式化Type的指令：

**[index ":"] ：** 

index指示Args中参数显示的顺序 。

例如：**Format("this is %d %d",12,13);**

其中第一个%d的索引是0，第二个%d是1，所以字符显示的时候，是这样：this is 12 13

若定义为：**Format("this is %1:d %0:d",12,13);**

那么返回的字符串就变成了：this is 13 12

若定义为：**Format("%d %d %d %0:d %d", 1, 2, 3, 4) ;**

那么将返回的是：1 2 3 1 2

若想返回的是1 2 3 1 4，必须这样定义：**Format("%d %d %d %0:d %3:d", 1, 2, 3, 4) ;**

**注：** 

索引不能超出Args中的个数，不然会引起异常。

例如：**Format("this is %2:d %0:d",12,13);**

由于Args中只有12 13 两个数，所以Index只能是0或1，这里为2就错了 。

**[width] ：** 

指定将被格式化的值占的宽度。

例如：**Format("this is %4d",12);**

返回的是：this is 12

如果Width的值小于参数的长度，则没有效果。

例如：**Format("this is %1d",12);**

返回的是：this is 12

**["-"] ：** 

这个指定参数向左对齐，和**[width]**合在一起最可以看到效果。

例如：**Format("this is %-4d,yes",12);**

返回的是：this is 12 ,yes

**["." prec] ：** 

指定精度，对于浮点数效果最佳。

例如：**Format('this is %.2f,1.1234);**

返回的是： this is 1.12

又如：**Format('this is %.7f,1.1234);**

返回的是： this is 1.1234000

而对于整型数，如果prec比如整型的位数小，则没有效果，反之比整形值的位数大，则会在整型值的前面以0补之。

例如：**Format('this is %.7d,1234);**

返回的是：this is 0001234

对于字符型，刚好和整型值相反，如果prec比字符串型的长度大，则没有效果，反之比字符串型的长度小，则会截断尾部的字符。

例如：**Format('this is %.2s,1234);**

返回的是：this is 12

之前说过的例子：**Format("this is %e",-2.22);**

返回的是：this is -2.220000E+000

若这样：**Format('this is %.2e',[-2.22]);** 就可以了
